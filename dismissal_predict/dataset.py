import codecs
from concurrent.futures import ThreadPoolExecutor, as_completed
import csv
from datetime import datetime
from difflib import get_close_matches
import logging
import os
import shutil
from threading import Lock
import time

from config import MAIN_CONFIGS, Config

# import getpasspip
import pandas as pd
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from tqdm import tqdm

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

DATA_RAW = "/home/root6/python/dismissal_predict_v2/data/raw"
CHROMEDRIVER_PATH = "/home/root6/chromedriver/chromedriver"
CONFIG = Config(MAIN_CONFIGS)
lock = Lock()

login_1c, password_1c, Srvr_zup, Ref_zup = CONFIG.get_1c_info()
cadr_users_list_url = CONFIG.get_cadr_users_list()
portal_children_link = CONFIG.get_portal_children_link()
portal_login, portal_password = CONFIG.get_portal_credentials()
portal_users_link = CONFIG.get_portal_users_link()
portal_director_link = CONFIG.get_portal_director_link()
whisper_data = CONFIG.get_whisper_url()
WHISPER_CATEGORIES = CONFIG.WHISPER_CATEGORIES


def is_valid_date(filename):
    try:
        datetime.strptime(filename, "%d.%m.%Y.xls")
        return True
    except ValueError:
        return False


def get_latest_file(directory):
    logger.info("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–¥—Ä–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤")
    latest_file = None
    latest_date = None

    for root, _, files in os.walk(directory):
        for file in files:
            if is_valid_date(file):
                try:
                    file_date = datetime.strptime(file, "%d.%m.%Y.xls")
                    if latest_date is None or file_date > latest_date:
                        latest_date = file_date
                        latest_file = os.path.join(root, file)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞—Ç—ã —Ñ–∞–π–ª–∞ {file}: {e}")

    if latest_file:
        destination_file = os.path.join(DATA_RAW, "last_users_from_cadr.xls")
        shutil.copy(latest_file, destination_file)
        logger.info(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: {latest_file}")
    else:
        logger.warning("‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    logger.info("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–¥—Ä–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def login(driver, username, password, auth_url=None):
    # –í—ã–±–æ—Ä —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç URL
    if auth_url and "user_admin" in auth_url or auth_url and "i_employees_children" in auth_url:
        # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å Bitrix user_admin
        login_selector = "#authorize > div > div:nth-child(3) > div.login-input-wrap > input"
        password_selector = "#authorize_password > div.login-input-wrap > input"
    else:
        # –û–±—ã—á–Ω–∞—è —Ñ–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        login_selector = (
            "#workarea-content > div > div > form > div:nth-child(4) > div:nth-child(1) > input"
        )
        password_selector = (
            "#workarea-content > div > div > form > div:nth-child(4) > div:nth-child(2) > input"
        )

    login_input = driver.find_element(By.CSS_SELECTOR, login_selector)
    login_input.send_keys(username)

    password_input = driver.find_element(By.CSS_SELECTOR, password_selector)
    password_input.send_keys(password)
    password_input.send_keys(Keys.RETURN)

    time.sleep(2)


def get_driver():
    driver_service = Service(executable_path=CHROMEDRIVER_PATH)
    options = webdriver.ChromeOptions()
    options.add_argument("--headless")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-gpu")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
    driver = webdriver.Chrome(service=driver_service, options=options)
    return driver


def get_portal_users(auth_url):
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ—Ä—Ç–∞–ª–∞")
    # auth_url = "http://next.portal.local/bitrix/admin/user_admin.php?lang=ru#authorize"
    driver = None
    try:
        driver = get_driver()
        driver.get(auth_url)
        login(driver, portal_login, portal_password, auth_url=auth_url)
        driver.get(auth_url)
        downloads_path = os.path.expanduser("~/Downloads")

        files = os.listdir(downloads_path)
        files = [f for f in files if f.endswith(".xls") or f.endswith(".xlsx")]

        if not files:
            logger.info("–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
            return

        latest_file = max([os.path.join(downloads_path, f) for f in files], key=os.path.getctime)

        temp_file_path = os.path.join(DATA_RAW, "main_users.html")
        shutil.copy(latest_file, temp_file_path)

        df_list = pd.read_html(temp_file_path)
        if df_list:
            df = df_list[0]
            new_file_path = os.path.join(DATA_RAW, "main_users.csv")
            df.to_csv(new_file_path, index=False)

            logger.info(
                f"–§–∞–π–ª {latest_file} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ {DATA_RAW} –∏ –ø–µ—Ä–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ main_users.csv."
            )
        else:
            logger.info("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã –≤ HTML-—Ñ–∞–π–ª–µ.")

        os.remove(latest_file)
        os.remove(temp_file_path)

    except Exception as e:
        logger.info(f"–û—à–∏–±–∫–∞: {e}")
        raise
    finally:
        if driver:
            driver.quit()
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ—Ä—Ç–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def get_portal_children(auth_url):
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ—Ä—Ç–∞–ª–∞")
    driver = None
    try:
        driver = get_driver()
        driver.get(auth_url)
        time.sleep(5)
        login(driver, portal_login, portal_password, auth_url=auth_url)
        time.sleep(5)

        table = driver.find_element(
            By.CSS_SELECTOR, "#form_tbl_perfmon_table6f366e427324b863457a9faef450aed6"
        )
        rows = table.find_elements(By.TAG_NAME, "tr")

        data = []
        for row in rows:
            cols = row.find_elements(By.TAG_NAME, "td")
            data.append([col.text for col in cols])

        df = pd.DataFrame(data)
        df.to_csv(os.path.join(DATA_RAW, "children.csv"), index=False, header=False, sep=",")
        logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {DATA_RAW}/children.csv.")

    except Exception as e:
        logger.info(f"–û—à–∏–±–∫–∞: {e}")
        raise
    finally:
        if driver:
            driver.quit()
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ—Ä—Ç–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def get_portal_director(auth_url: str):
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ—Ä—Ç–∞–ª–∞")
    driver = None

    try:
        driver = get_driver()
        driver.get(auth_url)
        login(driver, portal_login, portal_password)

        # –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü—ã
        table = driver.find_element(By.CSS_SELECTOR, "#workarea-content > div > table")
        rows = table.find_elements(By.TAG_NAME, "tr")

        data = []
        for row in rows:
            cols = row.find_elements(By.TAG_NAME, "td")
            if cols:
                data.append([col.text.strip() for col in cols])

        if not data:
            logger.warning("–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏.")
            return

        # –ù–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
        columns = ["id", "—Ñ–∏–æ", "id_—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è", "—Ñ–∏–æ_—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"]
        df_new = pd.DataFrame(data, columns=columns[: len(data[0])])

        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ ID –∫ int —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        def clean_id(val, default):
            try:
                return int(val)
            except:
                return default

        df_new["id"] = df_new["id"].apply(lambda x: clean_id(x, -1))
        df_new["id_—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"] = df_new["id_—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"].apply(lambda x: clean_id(x, 883))

        # –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        output_path = os.path.join(DATA_RAW, "director.csv")
        output_path_history = os.path.join(DATA_RAW, "director_history.csv")

        # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —á–∏—Ç–∞–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
        if os.path.exists(output_path):
            df_old = pd.read_csv(output_path)
        else:
            df_old = pd.DataFrame(columns=columns)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏
        df_old.set_index("id", inplace=True)
        df_new.set_index("id", inplace=True)

        for idx, row in df_new.iterrows():
            if idx in df_old.index:
                old_dir_id = df_old.at[idx, "id_—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"]
                new_dir_id = row["id_—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"]
                new_dir_fio = row["—Ñ–∏–æ_—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"]

                # –û–±–Ω–æ–≤–ª—è–µ–º, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è id_—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
                if old_dir_id != new_dir_id and new_dir_id != 883 and new_dir_fio != "":
                    df_old.at[idx, "id_—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"] = new_dir_id
                    df_old.at[idx, "—Ñ–∏–æ_—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"] = new_dir_fio
            else:
                # –ù–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
                df_old.loc[idx] = row  # type: ignore

        df_old.reset_index(inplace=True)
        df_old.to_csv(output_path, index=False, sep=",")
        df_old.to_csv(output_path_history, index=False, sep=",")
        logger.info(f"–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_path}.")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

    finally:
        if driver:
            driver.quit()

    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ—Ä—Ç–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


def get_whisper_stat(base_dir, check_list_file, output_file):
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–ø–æ–≤")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º check_list
    check_list = set()
    if os.path.exists(check_list_file):
        with codecs.open(check_list_file, "r", encoding="utf-8-sig") as f:
            check_list = set(os.path.abspath(line.strip()) for line in f if line.strip())

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö .txt —Ñ–∞–π–ª–æ–≤
    all_files = {
        os.path.abspath(os.path.join(root, file))
        for root, _, files in os.walk(base_dir)
        for file in files
        if file.endswith(".txt")
    }

    files_to_process = list(all_files - check_list)

    results = []
    new_check_entries = []

    max_workers = max(1, os.cpu_count() // 2)  # type: ignore

    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        futures = {executor.submit(process_file, file): file for file in files_to_process}

        for future in tqdm(as_completed(futures), total=len(futures), desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤"):
            file = futures[future]
            abs_path = os.path.abspath(file)
            try:
                result = future.result()
                if result is not None:
                    row, _ = result
                    results.append(row)
            except Exception:
                pass  # –û—à–∏–±–∫–∏ –º–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            finally:
                new_check_entries.append(abs_path)

    # –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if results:
        file_exists = os.path.exists(output_file)
        write_header = not file_exists or os.path.getsize(output_file) == 0

        with open(output_file, "a", encoding="utf-8", newline="") as f:
            writer = csv.DictWriter(f, fieldnames=results[0].keys())
            if write_header:
                writer.writeheader()
            writer.writerows(results)

    # –ó–∞–ø–∏—Å—å –Ω–æ–≤—ã—Ö –ø—É—Ç–µ–π –≤ check_list
    if new_check_entries:
        with codecs.open(check_list_file, "a", encoding="utf-8-sig") as f:
            for path in new_check_entries:
                f.write(path + "\n")

    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–ø–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def process_file(file_path):
    try:
        summ_check = 0
        dialog_analysis = {key: "–Ω–µ—Ç" for key in WHISPER_CATEGORIES}
        dialog_analysis["–¢–æ–Ω"] = "–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π"

        with open(file_path, "r", encoding="utf-8") as f:
            lines = [line.lower().strip() for line in f.readlines()[:8]]

        for line in lines:
            for cat in WHISPER_CATEGORIES:
                tag = f"[{cat.lower()}]"
                if line.startswith(tag):
                    if cat == "–¢–æ–Ω":
                        dialog_analysis["–¢–æ–Ω"] = (
                            "–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π" if "–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π" in line else "–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π"
                        )
                    else:
                        dialog_analysis[cat] = "–¥–∞" if "–¥–∞" in line else "–Ω–µ—Ç"

        for cat, val in dialog_analysis.items():
            if val == "–¥–∞":
                summ_check += WHISPER_CATEGORIES[cat]["–¥–∞"]

        if summ_check == 0:
            return None

        parts = file_path.split("-")
        username = parts[2].split("@")[0]

        row = {
            "–ª–æ–≥–∏–Ω": username,
            "—Ç–æ–Ω": WHISPER_CATEGORIES["–¢–æ–Ω"][dialog_analysis["–¢–æ–Ω"]],
            "—É–≤–æ–ª—å–Ω–µ–Ω–∏–µ": WHISPER_CATEGORIES["–£–≤–æ–ª—å–Ω–µ–Ω–∏–µ"][dialog_analysis["–£–≤–æ–ª—å–Ω–µ–Ω–∏–µ"]],
            "–æ—Ñ—Ñ–µ—Ä": WHISPER_CATEGORIES["–û—Ñ—Ñ–µ—Ä"][dialog_analysis["–û—Ñ—Ñ–µ—Ä"]],
            "–≤—Ä–µ–¥–∏—Ç–µ–ª—å—Å—Ç–≤–æ": WHISPER_CATEGORIES["–í—Ä–µ–¥–∏—Ç–µ–ª—å—Å—Ç–≤–æ"][dialog_analysis["–í—Ä–µ–¥–∏—Ç–µ–ª—å—Å—Ç–≤–æ"]],
            "–ª–∏—á–Ω–∞—è –∂–∏–∑–Ω—å": WHISPER_CATEGORIES["–õ–∏—á–Ω–∞—è –∂–∏–∑–Ω—å"][dialog_analysis["–õ–∏—á–Ω–∞—è –∂–∏–∑–Ω—å"]],
            "—Å—Ç—Ä–µ—Å—Å": WHISPER_CATEGORIES["–°—Ç—Ä–µ—Å—Å"][dialog_analysis["–°—Ç—Ä–µ—Å—Å"]],
            "–∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã": WHISPER_CATEGORIES["–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã"][dialog_analysis["–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã"]],
        }

        return row, file_path  # –í–µ—Ä–Ω—ë–º row + info –¥–ª—è check_list

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ {file_path}: {e}")
        return None


def get_1c_zup(base_name, server_1c, login, password):
    try:
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –ó–£–ü")
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –ó–£–ü –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        logger.info(f"–û—à–∏–±–∫–∞: {e}")
        raise


def run_all():
    get_latest_file(cadr_users_list_url)
    get_portal_users(portal_users_link)
    get_portal_children(portal_children_link)
    get_portal_director(portal_director_link)
    get_whisper_stat(
        base_dir=whisper_data,
        check_list_file=os.path.join(DATA_RAW, "check_list.txt"),
        output_file=os.path.join(DATA_RAW, "whisper_stat.csv"),
    )
    get_1c_zup(Ref_zup, Srvr_zup, login_1c, password_1c)
    # pass


if __name__ == "__main__":
    run_all()
